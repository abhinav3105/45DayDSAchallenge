class Solution {


    public ListNode findMid(ListNode head){
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next !=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;

    }

    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null){
            return true;
        }
        //step1 - Find middle
        ListNode midNode = findMid(head);

        //step2 - Reverse 2nd half
        ListNode prev = null;
        ListNode curr = midNode;
        ListNode next;
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        ListNode right = prev; // right hhalf head
        ListNode left = head;
        //step3 - check left half & reght half

        while (right != null) {
            if(left.val != right.val){
                return false;
            }
            right= right.next;
            left = left.next;

        }
        return true;
    }
}
